.TH "md_README__ZH__CN" 3 "Version 1.0" "ReleaseButler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_README__ZH__CN \- ReleaseButler 
.PP
 \fBEnglish\fP \fB简体中文\fP
.PP
当前项目仍在开发阶段，所以软件会输出很多不必要信息(现在添加了 \fRverbose\fP 这个 option)
.PP
ReleaseButler 旨在简化Linux系统上的 Github 上的软件安装过程🤗。 它可以自动检测底层 Linux 发行版，从指定的 GitHub 项目主页获取对应的软件包并安装，同时也支持更新操作。
.PP
目前我是想要实现一个类似 BSD 系“类 ports 系统”那样的东西，就像 Arch Linux 的 \fRABS\fP，或者像是 Gentoo Linux 的 \fRprotage\fP。目前想要的甚至还没 ABS 那么复杂，Gentoo Linux 那样标记 USE 变量更是想都没想了。
.PP
TODO:
.PP
.IP "[x]" 4
~~ 使用JSON格式存储软件包的信息。~~
.PP
.IP "[x]" 4
~~ 使用\fRbuild\fP字段存储一些在install之后执行的工作。~~
.PP
.IP "[x]" 4
~~ 使用\fRinstall\fP字段存储一些install之前的准备工作。~~
.PP
.IP "[x]" 4
~~ 我想要实现成如果不提供软件包的名字的话就默认直接clone仓库，准备开始编译它。~~
.IP "[ ]" 4
想要在GitHub创建一个仓库存储软件包安装的json文件，这样用户可以直接import之后安装。话说这样就好像nix(但我就是因为懒得学习nix语法，我才执着自己写一个)。
.PP
.IP "[ ]" 4
目前使用的是sudo安装软件，没做对当前软件的用户权限是否是非root用户，并且也没做对sudo的检测(准备实现成如果没有sudo就检测是否存在doas)。
.PP
.IP "[ ]" 4
我想实现成支持很多软件(源码)分发平台，但目前就只是做了对GitHub的处理。
.PP
.PP
.PP
.PP
⚠️: 你必须首先安装**sudo**而不是**open-doas**或是其他类似的软件，如果你不想强依赖于**sudo**可以选择修改源代码😀。或者我后续想起来会尝试添加对sudo或doas的检测。
.PP
.PP
.SH "特点:"
.PP
\fB自动发行版检测：\fP ReleaseButler 确定运行环境的Linux发行版，确保与各种系统的兼容性。
.PP
**安装和更新**：使用单个命令轻松安装软件包。 ReleaseButler 支持更新，使您安装的软件保持最新。(TODO)
.PP
\fB尽量适配各种情况\fP: 尝试引入各种字段以适配各种仓库的安装步骤。
.SH "使用方法"
.PP
.SS "安装软件:"
.PP
.nf
$ releasebutler \-\-install <name> \-\-pakname <package name> \-\-from <url> [\-\-verbose]
.fi
.PP
.PP
\fR--intsall\fP 字段接受的是要安装的软件的名称，而 \fRpackname\fP 字段是这个软件包名，例如 \fRfastfetch-linux-amd64\&.deb\fP 就是 \fRpackname\fP
.PP
从命令行安装尚未支持所有字段(如\fRinstall\fP，\fRbuild\fP等)。
.SS "更新"
.PP
.nf
$ relesebutler \-\-update
.fi
.PP
.SS "解析外部引入的json文件"
.PP
.nf
$ relesebutler \-\-parse <file name>
.fi
.PP
.PP
note: 这个文件需要在 **~/\&.config/ReleaseButler/** 目录中
.PP
.PP
.PP
note: ReleaseButler 现在还不支持指定软件包的单独更新。🙃
.PP
使用命令行安装的软件是记录在 **~/\&.config/ReleaseButler/info\&.json**，但是在更新的时候实际上会遍历 **~/\&.config/ReleaseButler/** 目录下的所有json文件。
.PP
我尝试通过这种方式支持引入其他地方来的json文件。但文件名不能叫 **package\&.json**，这个文件用来记录已安装软件包的版本，遍历到了这个json文件也会跳过。
.PP
.PP
.SH "软件包信息文件的字段定义:"
.PP
.PP
.nf
{
   "fastfetch": {
      "name": "fastfetch\-linux\-amd64\&.deb",
      "url": "https://github\&.com/fastfetch\-cli/fastfetch",
      "version": "2\&.13\&.2",
      "build" : [
         "touch something",
         "touch haaa"
      ],
      "install" : [
         "echo something > something"
      ],
      "clone": false,
      "download" : false
   }
}
.fi
.PP
.PP
.IP "\(bu" 2
\fRname\fP 是 Release 页面的软件包名称。
.IP "\(bu" 2
\fRbuild\fP 用于存储一些软件下载前的要执行操作。
.IP "\(bu" 2
\fRinstall\fP 用于存储一些软件安装后要执行的操作。
.IP "\(bu" 2
\fRclone\fP 表示是否直接 clone 这个仓库。
.IP "\(bu" 2
\fRdownload\fP 表示是否只是单纯在从Release下载了软件包，而不是下载了之后调用系统软件包管理器安装它。
.PP
.SH "支持的Linux发行版"
.PP
.IP "\(bu" 2
Debian/Ubuntu/Deepin
.IP "\(bu" 2
Fedora
.PP
.PP
.PP
.SH "如何编译"
.PP
如果你在 Debian 发行版下编译该项目:
.PP
.PP
.nf
$ sudo apt install libcurl4\-openssl\-dev libboost\-all\-dev clang cmake
$ git clone https://github\&.com/suoyuan666/ReleaseButler\&.git
$ cd ReleaseButler
$ git submodule update \-\-init \-\-recursive
$ cmake \-B build \-DCMAKE_BUILD_TYPE=Release
$ cmake \-\-build build \-j `nproc`
.fi
.PP
.PP
我尝试在 OpenSUSE Tumbleweed 中编译这个项目，我是用了下边的语句安装了所需的软件
.PP
.PP
.nf
$ sudo zypper install libboost_program_options\-devel boost\-devel libcurl\-devel clang18 llvm18\-gold cmake
.fi
.PP
.PP
如果是在其他平台下编译，原谅我懒了，自己去寻找 libcurl4-openssl-dev 这个包对应其他发型版的软件包名吧。😛
.PP
我在 \fBCMakeLists\&.txt\fP 中写明了使用\fRclang\fP编译，因为其中一些编译选项我使用的是\fRclang\fP的，如果你希望使用\fRgcc\fP编译，也许你还需要修改一下编译选项。就是这部分：
.PP
.PP
.nf
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    message(STATUS "Configuring Release build")
    # something come form https://airbus\-seclab\&.github\&.io/c\-compiler\-security/clang_compilation\&.html
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} \-O2 \-pipe \-fPIE \-Wall \-Wextra \-Wpedantic \-Werror \-Wthread\-safety")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} \-fstack\-clash\-protection \-fstack\-protector\-all \-fcf\-protection=full")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} \-flto \-fvisibility=hidden \-fsanitize=cfi")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} \-fsanitize=integer \-fsanitize\-minimal\-runtime \-fno\-sanitize\-recover")
endif()
.fi
.PP
 
