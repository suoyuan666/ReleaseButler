.TH "cppcurl::CPPCURL" 3 "Version 1.0" "ReleaseButler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cppcurl::CPPCURL \- A simple wrapper for libcurl\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <cppcurl\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCPPCURL\fP ()"
.br
.ti -1c
.RI "\fB~CPPCURL\fP ()"
.br
.ti -1c
.RI "\fBCPPCURL\fP (CURL *curl)"
.br
.ti -1c
.RI "\fBCPPCURL\fP (const \fBCPPCURL\fP &val)"
.br
.ti -1c
.RI "\fBCPPCURL\fP (\fBCPPCURL\fP &&val) noexcept"
.br
.ti -1c
.RI "auto \fBoperator=\fP (const \fBCPPCURL\fP &val) \-> \fBCPPCURL\fP &"
.br
.ti -1c
.RI "auto \fBoperator=\fP (\fBCPPCURL\fP &&val) noexcept \-> \fBCPPCURL\fP &"
.br
.ti -1c
.RI "auto \fBck4ok\fP () const \-> bool"
.br
.RI "Detecting errors in the \fRcode_\fP field\&. "
.ti -1c
.RI "auto \fBempty\fP () const \-> bool"
.br
.RI "Return (\fRcurl_ == nullptr\fP) "
.ti -1c
.RI "auto \fBreset\fP () \-> void"
.br
.RI "Simple wrapping of \fRcurl_easy_reset()\fP "
.ti -1c
.RI "auto \fBgetinfo\fP (CURLINFO flag, int64_t *val) \-> void"
.br
.RI "Simple encapsulation of \fRcurl_easy_getinfo()\fP\&. "
.ti -1c
.RI "auto \fBgetinfo_from_str\fP (CURLINFO flag, std::string &val) \-> void"
.br
.RI "Simple encapsulation of \fRcurl_easy_getinfo()\fP\&. "
.ti -1c
.RI "auto \fBsetopt\fP (CURLoption option, std::string_view val) \-> void"
.br
.RI "Simple encapsulation of \fRcurl_easy_setopt()\fP\&. "
.ti -1c
.RI "auto \fBstore_ass2file\fP (std::string_view url, std::string_view file_name, bool vmod) \-> bool"
.br
.RI "Access the specified URL and save it to the specified file\&. "
.ti -1c
.RI "auto \fBperform\fP () \-> void"
.br
.RI "Simple wrapping of \fRcurl_easy_perform()\fP "
.ti -1c
.RI "auto \fBerrorMsg\fP () \-> std::string_view"
.br
.RI "Simple wrapping of \fRcurl_easy_strerror()\fP "
.in -1c
.SH "Detailed Description"
.PP 
A simple wrapper for libcurl\&. 

This class contains only two private members, \fRCURL *curl_\fP and \fRCURLcode code_\fP, and a simple wrapper for some libcurl functions, which I want to be able to use in other source files in a C++ way for web downloads and such\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "cppcurl::CPPCURL::CPPCURL ()"

.SS "cppcurl::CPPCURL::~CPPCURL ()"

.SS "cppcurl::CPPCURL::CPPCURL (CURL * curl)\fR [explicit]\fP"

.SS "cppcurl::CPPCURL::CPPCURL (const \fBCPPCURL\fP & val)"

.SS "cppcurl::CPPCURL::CPPCURL (\fBCPPCURL\fP && val)\fR [noexcept]\fP"

.SH "Member Function Documentation"
.PP 
.SS "auto cppcurl::CPPCURL::ck4ok () const \-> bool"

.PP
Detecting errors in the \fRcode_\fP field\&. 
.SS "auto cppcurl::CPPCURL::empty () const \-> bool"

.PP
Return (\fRcurl_ == nullptr\fP) 
.SS "auto cppcurl::CPPCURL::errorMsg () \-> std::string_view"

.PP
Simple wrapping of \fRcurl_easy_strerror()\fP 
.PP
\fBReturns\fP
.RS 4
error message 
.RE
.PP

.SS "auto cppcurl::CPPCURL::getinfo (CURLINFO flag, int64_t * val) \-> void"

.PP
Simple encapsulation of \fRcurl_easy_getinfo()\fP\&. Call \fRcurl_easy_getinfo()\fP to get the information and put the return value of \fRcurl_easy_getinfo()\fP into the code_ member\&.
.PP
\fBParameters\fP
.RS 4
\fI`flag`\fP Setting the type of information to be extracted\&. 
.br
\fI`val`\fP The int that needs to hold the information
.RE
.PP
\fBNote\fP
.RS 4
For more information on \fRflag\fP, see https://curl.se/libcurl/c/curl_easy_getinfo.html\&. 
.RE
.PP

.SS "auto cppcurl::CPPCURL::getinfo_from_str (CURLINFO flag, std::string & val) \-> void"

.PP
Simple encapsulation of \fRcurl_easy_getinfo()\fP\&. Call \fRcurl_easy_getinfo()\fP to get the information and put the return value of \fRcurl_easy_getinfo()\fP into the code_ member\&.
.PP
\fBParameters\fP
.RS 4
\fI`flag`\fP Setting the type of information to be extracted\&. 
.br
\fI`val`\fP The std::string that needs to hold the information
.RE
.PP
\fBNote\fP
.RS 4
For more information on \fRflag\fP, see https://curl.se/libcurl/c/curl_easy_getinfo.html\&. 
.RE
.PP

.SS "auto cppcurl::CPPCURL::operator= (const \fBCPPCURL\fP & val) \-> \fBCPPCURL\fP&"

.SS "auto cppcurl::CPPCURL::operator= (\fBCPPCURL\fP && val) \-> \fBCPPCURL\fP&\fR [noexcept]\fP"

.SS "auto cppcurl::CPPCURL::perform () \-> void"

.PP
Simple wrapping of \fRcurl_easy_perform()\fP 
.SS "auto cppcurl::CPPCURL::reset () \-> void"

.PP
Simple wrapping of \fRcurl_easy_reset()\fP 
.SS "auto cppcurl::CPPCURL::setopt (CURLoption option, std::string_view val) \-> void"

.PP
Simple encapsulation of \fRcurl_easy_setopt()\fP\&. Call \fRcurl_easy_setopt()\fP to set the information\&.
.PP
\fBParameters\fP
.RS 4
\fI`option`\fP What information to set 
.br
\fI`val`\fP std::string holding information
.RE
.PP
\fBNote\fP
.RS 4
For more information on \fRflag\fP, see https://curl.se/libcurl/c/curl_easy_setopt.html\&. 
.RE
.PP

.SS "auto cppcurl::CPPCURL::store_ass2file (std::string_view url, std::string_view file_name, bool vmod) \-> bool\fR [nodiscard]\fP"

.PP
Access the specified URL and save it to the specified file\&. 
.PP
\fBParameters\fP
.RS 4
\fI`url`\fP Specified url 
.br
\fI`file_name`\fP Specified file name 
.br
\fI`vmode`\fP Whether to output more information (for debugging purposes) 
.RE
.PP
\fBReturns\fP
.RS 4
Returns a bool indicating whether the function was executed correctly\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for ReleaseButler from the source code\&.
